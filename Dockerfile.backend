# Stage 1: Build the TypeScript code
FROM node:20-alpine AS builder

WORKDIR /app

# Install build tools (needed by some dependencies potentially)
# Alpine's apk add comes first
RUN apk add --no-cache python3 make g++

# Copy backend package files
COPY backend/package*.json ./

# Install ALL dependencies (including dev for build)
RUN npm install

# Copy the rest of the backend source code
COPY backend/src ./src
COPY backend/tsconfig.json ./

# Build the TypeScript code
RUN npm run build

# After build, remove devDependencies for cleaner production install later
RUN npm prune --production

# Stage 2: Create the production image
FROM node:20-alpine

WORKDIR /app

# Install ffmpeg
RUN apk add --no-cache ffmpeg

# Copy package.json and pruned node_modules from the builder stage
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules

# Copy built code from the builder stage
COPY --from=builder /app/dist ./dist

# Create the uploads directory within dist, where the running code expects it
RUN mkdir -p dist/uploads

# Expose the application port
EXPOSE 3001

# Command to run the application (runs from dist/index.js)
CMD [ "node", "dist/index.js" ] 